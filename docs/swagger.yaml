basePath: /api/v1
definitions:
  models.ErrorResponse:
    properties:
      details:
        type: string
      message:
        type: string
      status_code:
        type: integer
    type: object
  products.Product:
    properties:
      id:
        type: integer
      name:
        type: string
      price:
        type: number
    type: object
  users.User:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is an online store API
  title: Online Store API
  version: "1.0"
paths:
  /products:
    get:
      consumes:
      - application/json
      description: Returns all the products
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Get all the products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Creates a product
      parameters:
      - description: Product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/products.Product'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
      summary: Create a product
      tags:
      - products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Delete a product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Returns a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Get a product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Updates a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/products.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Update a product
      tags:
      - products
  /users:
    get:
      consumes:
      - application/json
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/users.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all the users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/users.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/users.User'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a user
      tags:
      - users
schemes:
- http
swagger: "2.0"
